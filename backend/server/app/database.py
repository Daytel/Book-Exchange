from sqlalchemy import create_engine, text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å fallback-–∑–Ω–∞—á–µ–Ω–∏—è–º–∏
DB_USER = os.getenv("DB_USER", "root")  # Fallback –∫ 'root' –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –∑–∞–¥–∞–Ω–∞
DB_PASSWORD = os.getenv("DB_PASSWORD", "")
DB_HOST = os.getenv("DB_HOST", "localhost")
DB_PORT = os.getenv("DB_PORT", "3306")  # –î–æ–±–∞–≤–ª–µ–Ω –ø–æ—Ä—Ç
DB_NAME = os.getenv("DB_NAME", "mydb")

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
SQLALCHEMY_DATABASE_URL = (
    f"mysql+pymysql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}"
    "?charset=utf8mb4"  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–≤–∏–∂–∫–∞ SQLAlchemy
engine = create_engine(
    SQLALCHEMY_DATABASE_URL,
    pool_pre_ping=True,  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
    pool_recycle=3600,   # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 3600 —Å–µ–∫—É–Ω–¥ (1 —á–∞—Å)
    pool_size=10,        # –†–∞–∑–º–µ—Ä –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    max_overflow=20,     # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–≤–µ—Ä—Ö pool_size
    echo=False           # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ SQL (True –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
)

# –§–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π
SessionLocal = sessionmaker(
    autocommit=False,
    autoflush=False,
    bind=engine
)

# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–µ–π
Base = declarative_base()

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–π –¥–ª—è Dependency Injection
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# üöÄ –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–ó–´ –ü–†–ò –ó–ê–ü–£–°–ö–ï
def populate_database():
    BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", ".."))
    test_data_path = os.path.join(BASE_DIR, "db", "test_data.sql")

    if not os.path.exists(test_data_path):
        print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_data_path}")
        return

    print("üì• –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ test_data.sql...")
    with open(test_data_path, encoding="utf-8") as f:
        sql_commands = f.read()

    with engine.connect() as conn:
        for command in sql_commands.split(';'):
            command = command.strip()
            if command:
                try:
                    conn.execute(text(command))
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL:\n{command[:100]}...\n{e}")
        conn.commit()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.")

def clear_database():
    print("‚ö†Ô∏è –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    with engine.connect() as conn:
        trans = conn.begin()
        try:
            conn.execute(text("SET FOREIGN_KEY_CHECKS = 0"))
            for table in reversed(Base.metadata.sorted_tables):
                conn.execute(text(f"TRUNCATE TABLE `{table.name}`"))
            conn.execute(text("SET FOREIGN_KEY_CHECKS = 1"))
            trans.commit()
            print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.")
        except Exception as e:
            trans.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

if __name__ == "__main__":
    import sys

    if "clear" in sys.argv:
        clear_database()
    elif "populate" in sys.argv:
        populate_database()
    else:
        print("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π: python database.py [clear | populate]")
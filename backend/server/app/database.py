from datetime import datetime
from sqlalchemy import create_engine, text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session
import os
from dotenv import load_dotenv
from fastapi import Depends, HTTPException, status, Request
from .models import Session as SessionModel, User
from passlib.context import CryptContext

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å fallback-–∑–Ω–∞—á–µ–Ω–∏—è–º–∏
DB_USER = os.getenv("DB_USER", "root")  # Fallback –∫ 'root' –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –∑–∞–¥–∞–Ω–∞
DB_PASSWORD = os.getenv("DB_PASSWORD", "")
DB_HOST = os.getenv("DB_HOST", "localhost")
DB_PORT = os.getenv("DB_PORT", "3306")  # –î–æ–±–∞–≤–ª–µ–Ω –ø–æ—Ä—Ç
DB_NAME = os.getenv("DB_NAME", "mydb")

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
SQLALCHEMY_DATABASE_URL = (
    f"mysql+pymysql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}"
    "?charset=utf8mb4"  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–≤–∏–∂–∫–∞ SQLAlchemy
engine = create_engine(
    SQLALCHEMY_DATABASE_URL,
    pool_pre_ping=True,  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
    pool_recycle=3600,   # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 3600 —Å–µ–∫—É–Ω–¥ (1 —á–∞—Å)
    pool_size=10,        # –†–∞–∑–º–µ—Ä –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    max_overflow=20,     # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–≤–µ—Ä—Ö pool_size
    echo=False,          # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ SQL (True –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    connect_args={"init_command": "SET sql_mode='STRICT_TRANS_TABLES'"}
)

# –§–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π
SessionLocal = sessionmaker(
    autocommit=False,
    autoflush=False,
    bind=engine
)

# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–µ–π
Base = declarative_base()

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–π –¥–ª—è Dependency Injection
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# üöÄ –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–ó–´ –ü–†–ò –ó–ê–ü–£–°–ö–ï
def populate_database():
    BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", ".."))
    init_db_path = os.path.join(BASE_DIR, "db", "init-db.sql")
    test_data_path = os.path.join(BASE_DIR, "db", "test_data.sql")

    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    print("üßπ –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    clear_database()

    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∏–∑ init-db.sql
    if os.path.exists(init_db_path):
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∏–∑ init-db.sql...")
        with open(init_db_path, encoding="utf-8") as f:
            init_sql = f.read()

        with engine.connect() as conn:
            try:
                # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
                init_sql = init_sql.replace('SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;', 'SET UNIQUE_CHECKS=0;')
                init_sql = init_sql.replace('SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;', 'SET FOREIGN_KEY_CHECKS=0;')
                init_sql = init_sql.replace('SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=', 'SET SQL_MODE=')
                init_sql = init_sql.replace('SET SQL_MODE=@OLD_SQL_MODE;', "SET SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';")
                init_sql = init_sql.replace('SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;', 'SET FOREIGN_KEY_CHECKS=1;')
                init_sql = init_sql.replace('SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;', 'SET UNIQUE_CHECKS=1;')
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, —É—á–∏—Ç—ã–≤–∞—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ CREATE TABLE
                statements = []
                current_statement = ""
                in_create_table = False
                paren_count = 0
                
                for line in init_sql.split('\n'):
                    line = line.strip()
                    if not line or line.startswith('--') or line.startswith('/*'):
                        continue
                    
                    current_statement += line + " "
                    
                    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–∫–æ–±–∫–∏ –¥–ª—è CREATE TABLE
                    if 'CREATE TABLE' in line.upper():
                        in_create_table = True
                    
                    if in_create_table:
                        paren_count += line.count('(') - line.count(')')
                        if paren_count == 0 and line.endswith(';'):
                            in_create_table = False
                            statements.append(current_statement.strip())
                            current_statement = ""
                    elif line.endswith(';'):
                        statements.append(current_statement.strip())
                        current_statement = ""
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É –æ—Ç–¥–µ–ª—å–Ω–æ
                for statement in statements:
                    if statement.strip():
                        try:
                            conn.execute(text(statement))
                            print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {statement[:50]}...")
                        except Exception as e:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {statement[:50]}...\n{e}")
                
                conn.commit()
                print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
                conn.rollback()
                raise

    if not os.path.exists(test_data_path):
        print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_data_path}")
        return

    print("üì• –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ test_data.sql...")
    
    with open(test_data_path, encoding="utf-8") as f:
        sql_commands = f.read()

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –≤ SQL
    # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ç–∞–±–ª–∏—Ü–µ Category, –Ω–æ –Ω–µ –≤ Status
    sql_commands = sql_commands.replace('`Category`.`Name`', '`Category`.`Value`')
    sql_commands = sql_commands.replace('`Category_IdCategory`', '`IdValueCategory`')  # UserValueCategory

    with engine.connect() as conn:
        # –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ù–ï-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        for command in sql_commands.split(';'):
            command = command.strip()
            if command and "UNHASHED_PASSWORD" not in command and not command.startswith('/*'):
                try:
                    conn.execute(text(command))
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL:\n{command[:100]}...\n{e}")
        
        # –ó–∞—Ç–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        for command in sql_commands.split(';'):
            command = command.strip()
            if command and "UNHASHED_PASSWORD" in command:
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
                    unhashed_start = command.find("'UNHASHED_PASSWORD:") + 19
                    unhashed_end = command.find("'", unhashed_start)
                    raw_password = command[unhashed_start:unhashed_end]
                    
                    # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
                    hashed_password = pwd_context.hash(raw_password)
                    
                    # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º SQL
                    safe_command = command.replace(f"'UNHASHED_PASSWORD:{raw_password}'", f"'{hashed_password}'")
                    
                    conn.execute(text(safe_command))
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{command[:100]}...\n{e}")
        
        conn.commit()
    
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏.")

# –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Ö–µ—à–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def hash_existing_passwords():
    db = SessionLocal()
    try:
        users = db.query(User).filter(User.Password.like("UNHASHED_PASSWORD:%")).all()
        for user in users:
            raw_password = user.Password.split(":")[1]
            user.set_password(raw_password)
        db.commit()
    finally:
        db.close()

def clear_database():
    print("‚ö†Ô∏è –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    with engine.connect() as conn:
        trans = conn.begin()
        try:
            conn.execute(text("SET FOREIGN_KEY_CHECKS = 0"))
            for table in reversed(Base.metadata.sorted_tables):
                conn.execute(text(f"TRUNCATE TABLE `{table.name}`"))
            conn.execute(text("SET FOREIGN_KEY_CHECKS = 1"))
            trans.commit()
            print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.")
        except Exception as e:
            trans.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

if __name__ == "__main__":
    import sys

    if "clear" in sys.argv:
        clear_database()
    elif "populate" in sys.argv:
        populate_database()
    else:
        print("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π: python database.py [clear | populate]")

def get_current_user(request: Request, db: Session = Depends(get_db)):
    session_token = request.cookies.get("session_token")
    if not session_token:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    session = db.query(SessionModel).filter(
        SessionModel.SessionToken == session_token
    ).first()
    
    if not session or session.ExpiresAt < datetime.utcnow():
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è"
        )
    
    return session.user